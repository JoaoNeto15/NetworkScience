edge.label = NA,
vertex.label.cex =1, vertex.size = 20, vertex.color=V(bladeRunner)$color)
### calculate modularity
bladeRunner_AdjacencyMatrix = get.adjacency(bladeRunner, sparse=FALSE) # adjacency matrix
m = gsize(bladeRunner) # total number of edges
bladeRunner_Communities <- nodes$modularity_class+1
bladeRunner_Modularity = 0
for(i in 1:vcount(bladeRunner)){
for(j in 1:vcount(bladeRunner)){
if(bladeRunner_Communities[i]==bladeRunner_Communities[j])
bladeRunner_Modularity = bladeRunner_Modularity +
bladeRunner_AdjacencyMatrix[i,j] -
(degree(bladeRunner)[i]*degree(bladeRunner)[j])/(2*m)
}
}
bladeRunner_Modularity = bladeRunner_Modularity/(2*m)
print(paste("Modularity of the bladeRunner grpah:",round(bladeRunner_Modularity,4)))
# Homework#2 6 c)
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edges_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
# Importing the modularity classes
V(file)$color <- nodes$modularity_class+1
plot(file, layout = layout_with_fr,
edge.label = NA,
vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
# Homework#2 6 c)
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
# Importing the modularity classes
V(file)$color <- nodes$modularity_class+1
plot(file, layout = layout_with_fr,
edge.label = NA,
vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
# Homework#2 6 c)
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
# Importing the modularity classes
V(file)$color <- nodes$modularity_class+1
plot(file, layout = layout_with_fr, edge.label = NA, vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
# Calculate Modularity
# adjacency matrix
adjacencyMatrix = get.adjacency(file, sparse=FALSE)
# total number of edges
m = gsize(file)
Communities <- nodes$modularity_class+1
# Homework#2 6 c)
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
# Importing the modularity classes
V(file)$color <- nodes$modularity_class+1
plot(file, layout = layout_with_fr, edge.label = NA, vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
# Calculate Modularity
# adjacency matrix
adjacencyMatrix = get.adjacency(file, sparse=FALSE)
# total number of edges
m = gsize(file)
Communities <- nodes$modularity_class+1
#Variable with the modularity
Modularity = 0
for(i in 1:vcount(file)){
for(j in 1:vcount(file)){
if(Communities[i]==Communities[j])
Modularity =Modularity +adjacencyMatrix[i,j] -(degree(file)[i]*degree(file)[j])/(2*m)
}
}
Modularity = Modularity/(2*m)
print(paste("Modularity of the ", file, " grpah: ",round(Modularity,4)))
# Homework#2 6 c)
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
# Importing the modularity classes
V(file)$color <- nodes$modularity_class+1
plot(file, layout = layout_with_fr, edge.label = NA, vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
# Calculate Modularity
# adjacency matrix
adjacencyMatrix = get.adjacency(file, sparse=FALSE)
# total number of edges
m = gsize(file)
Communities <- nodes$modularity_class+1
#Variable with the modularity
Modularity = 0
for(i in 1:vcount(file)){
for(j in 1:vcount(file)){
if(Communities[i]==Communities[j])
Modularity =Modularity +adjacencyMatrix[i,j] -(degree(file)[i]*degree(file)[j])/(2*m)
}
}
Modularity = Modularity/(2*m)
print(paste("Modularity of the ", "file", " grpah: ",round(Modularity,4)))
# Homework#2 6 c)
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
# Importing the modularity classes
V(file)$color <- nodes$modularity_class+1
plot(file, layout = layout_with_fr, edge.label = NA, vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
# Calculate Modularity
# adjacency matrix
adjacencyMatrix = get.adjacency(file, sparse=FALSE)
# total number of edges
m = gsize(file)
Communities <- nodes$modularity_class+1
#Variable with the modularity
Modularity = 0
for(i in 1:vcount(file)){
for(j in 1:vcount(file)){
if(Communities[i]==Communities[j])
Modularity =Modularity +adjacencyMatrix[i,j] -(degree(file)[i]*degree(file)[j])/(2*m)
}
}
Modularity = Modularity/(2*m)
print(paste("Modularity of the starwars_v grpah: ",round(Modularity,4)))
# Homework#2 6 c)
# this exercise was made with the help of my colleague Fabiana Alves.
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
# Homework#2 6 c)
# this exercise was made with the help of my colleague Fabiana Alves.
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
#Function to calculate modularity
modularityCalc<-function(file,Communities){
# adjacency matrix
adjacencyMatrix = get.adjacency(file, sparse=FALSE)
# total number of edges
m = gsize(file)
Modularity = 0
for(i in 1:vcount(file)){
for(j in 1:vcount(file)){
if(Communities[i]==Communities[j])
Modularity =Modularity +adjacencyMatrix[i,j] -(degree(file)[i]*degree(file)[j])/(2*m)
}
}
Modularity = Modularity/(2*m)
V(file)$color <- nodes$modularity_class+1
# To view the graph and the communities generated by gephi please umcomment the next line
plot(file, layout = layout_with_fr, edge.label = NA, vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
return(round(Modularity,4))
}
# Homework#2 6 c)
# this exercise was made with the help of my colleague Fabiana Alves.
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
#Function to calculate modularity
modularityCalc<-function(file,Communities){
# adjacency matrix
adjacencyMatrix = get.adjacency(file, sparse=FALSE)
# total number of edges
m = gsize(file)
Modularity = 0
for(i in 1:vcount(file)){
for(j in 1:vcount(file)){
if(Communities[i]==Communities[j])
Modularity =Modularity +adjacencyMatrix[i,j] -(degree(file)[i]*degree(file)[j])/(2*m)
}
}
Modularity = Modularity/(2*m)
V(file)$color <- nodes$modularity_class+1
# To view the graph and the communities generated by gephi please umcomment the next line
plot(file, layout = layout_with_fr, edge.label = NA, vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
return(round(Modularity,4))
}
# Homework#2 6 c)
# this exercise was made with the help of my colleague Fabiana Alves.
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
#Function to calculate modularity
modularityCalc<-function(file,Communities){
# adjacency matrix
adjacencyMatrix = get.adjacency(file, sparse=FALSE)
# total number of edges
m = gsize(file)
Modularity = 0
for(i in 1:vcount(file)){
for(j in 1:vcount(file)){
if(Communities[i]==Communities[j])
Modularity =Modularity +adjacencyMatrix[i,j] -(degree(file)[i]*degree(file)[j])/(2*m)
}
}
Modularity = Modularity/(2*m)
V(file)$color <- nodes$modularity_class+1
# To view the graph and the communities generated by gephi please umcomment the next line
#plot(file, layout = layout_with_fr, edge.label = NA, vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
return(round(Modularity,4))
}
# Homework#2 6 c)
# this exercise was made with the help of my colleague Fabiana Alves.
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
#Function to calculate modularity
modularityCalc<-function(file,Communities){
# adjacency matrix
adjacencyMatrix = get.adjacency(file, sparse=FALSE)
# total number of edges
m = gsize(file)
Modularity = 0
for(i in 1:vcount(file)){
for(j in 1:vcount(file)){
if(Communities[i]==Communities[j])
Modularity =Modularity +adjacencyMatrix[i,j] -(degree(file)[i]*degree(file)[j])/(2*m)
}
}
Modularity = Modularity/(2*m)
V(file)$color <- nodes$modularity_class+1
# To view the graph and the communities generated by gephi please umcomment the next line
#plot(file, layout = layout_with_fr, edge.label = NA, vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
return(round(Modularity,4))
}
# Calc the communities in file
Communities <- 1:vcount(file)
modularityCalc(file,Communities)
# Homework#2 6 c)
# this exercise was made with the help of my colleague Fabiana Alves.
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
# Importing the modularity classes
V(file)$color <- nodes$modularity_class+1
# To view the graph and the communities generated by gephi please umcomment the next line
#plot(file, layout = layout_with_fr, edge.label = NA, vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
# Calculate Modularity
# adjacency matrix
adjacencyMatrix = get.adjacency(file, sparse=FALSE)
# total number of edges
m = gsize(file)
Communities <- nodes$modularity_class+1
#Variable with the modularity
Modularity = 0
for(i in 1:vcount(file)){
for(j in 1:vcount(file)){
if(Communities[i]==Communities[j])
Modularity =Modularity +adjacencyMatrix[i,j] -(degree(file)[i]*degree(file)[j])/(2*m)
}
}
Modularity = Modularity/(2*m)
print(paste("Modularity of the starwars_v grpah: ",round(Modularity,4)))
# Homework#2 6 c)
# this exercise was made with the help of my colleague Fabiana Alves.
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
#Function to calculate modularity
modularityCalc<-function(file,Communities){
# adjacency matrix
adjacencyMatrix = get.adjacency(file, sparse=FALSE)
# total number of edges
m = gsize(file)
Modularity = 0
for(i in 1:vcount(file)){
for(j in 1:vcount(file)){
if(Communities[i]==Communities[j])
Modularity =Modularity +adjacencyMatrix[i,j] -(degree(file)[i]*degree(file)[j])/(2*m)
}
}
Modularity = Modularity/(2*m)
V(file)$color <- nodes$modularity_class+1
# To view the graph and the communities generated by gephi please umcomment the next line
#plot(file, layout = layout_with_fr, edge.label = NA, vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
return(round(Modularity,4))
}
# Calc the communities in file
Communities <- 1:vcount(file)
modularityCalc(file,Communities)
library(igraph)
library(readr)
library(RColorBrewer)
# Read gml File
bladeRunner=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
# finction to find calculate modularity and display plot
modularityFinder <- function(bladeRunner,bladeRunner_Communities){
bladeRunner_AdjacencyMatrix = get.adjacency(bladeRunner, sparse=FALSE) # adjacency matrix
m = gsize(bladeRunner) # total number of edges
bladeRunner_Modularity = 0
for(i in 1:vcount(bladeRunner)){
for(j in 1:vcount(bladeRunner)){
if(bladeRunner_Communities[i]==bladeRunner_Communities[j])
bladeRunner_Modularity = bladeRunner_Modularity +
bladeRunner_AdjacencyMatrix[i,j] -
(degree(bladeRunner)[i]*degree(bladeRunner)[j])/(2*m)
}
}
bladeRunner_Modularity = bladeRunner_Modularity/(2*m)
V(bladeRunner)$color <- bladeRunner_Communities
plot(bladeRunner, layout = layout_with_fr,
edge.label = NA,
vertex.label.cex =1, vertex.size = 20)
# print(paste("Modularity of the bladeRunner grpah:",round(bladeRunner_Modularity,4)))
return(round(bladeRunner_Modularity,4))
}
bladeRunner_Communities <- 1:vcount(bladeRunner)
# bladeRunner_Communities <- nodes$modularity_class+1
modularityFinder(bladeRunner,bladeRunner_Communities)
keepModularity = vector()
baseModularity = modularityFinder(bladeRunner,bladeRunner_Communities)
size = 0
vec = bladeRunner_Communities
for(i in 1:length(vec)){
for( j in i+1:length(vec)){
if( j<=length(vec)) {
testPartition = replace(vec,i,j)
currentModularity =  modularityFinder(bladeRunner,testPartition)
if(currentModularity>baseModularity){
largePartion = testPartition
largeModularity = currentModularity
}
}
}
print(largeModularity)
keepModularity[length(keepModularity)+1] = largeModularity
baseModularity = largeModularity
print(largePartion)
vec = largePartion
}
plot(keepModularity)
# Q6e: for getting more communities aim for lowest modularity (anti community structure)
# Homework#2 6 c)
# this exercise was made with the help of my colleague Fabiana Alves.
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
#Function to calculate modularity
modularityCalc<-function(file,Communities){
# adjacency matrix
adjacencyMatrix = get.adjacency(file, sparse=FALSE)
# total number of edges
m = gsize(file)
Modularity = 0
for(i in 1:vcount(file)){
for(j in 1:vcount(file)){
if(Communities[i]==Communities[j])
Modularity =Modularity +adjacencyMatrix[i,j] -(degree(file)[i]*degree(file)[j])/(2*m)
}
}
Modularity = Modularity/(2*m)
V(file)$color <- nodes$modularity_class+1
# To view the graph and the communities generated by gephi please umcomment the next line
#plot(file, layout = layout_with_fr, edge.label = NA, vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
return(round(Modularity,4))
}
# Calc the communities in file
Communities <- 1:vcount(file)
#modularityCalc(file,Communities)
adjMod=vector()
baseMod=modularityCalc(file,Communities)
size=0
vec=Communities
keepModularity = vector()
baseModularity = modularityFinder(bladeRunner,bladeRunner_Communities)
size = 0
vec = bladeRunner_Communities
for(i in 1:length(vec)){
for( j in i+1:length(vec)){
if( j<=length(vec)) {
PartitionAUX = replace(vec,i,j)
currentMod=  modularityCalc(file,PartitionAUX)
if(currentMod>baseMod){
BigPartion = PartitionAUX
BigModularity = currentMod
}
}
}
print(BigModularity)
adjMod[length(adjMod)+1] = BigModularity
baseMod = BigModularity
print(BigPartion)
vec = BigPartion
}
plot(adjMod)
# Homework#2 6 c)
# this exercise was made with the help of my colleague Fabiana Alves.
#Import Librarys
library(igraph)
library(readr)
# Read gml File
file=read_graph("starwars_v.gml",format = "gml")
# read files generated by gephi with the modularity in nodes
edges = read_csv("edgess_StarWars.csv")
nodes = read_csv("nodes_StarWars.csv")
#Function to calculate modularity
modularityCalc<-function(file,Communities){
# adjacency matrix
adjacencyMatrix = get.adjacency(file, sparse=FALSE)
# total number of edges
m = gsize(file)
Modularity = 0
for(i in 1:vcount(file)){
for(j in 1:vcount(file)){
if(Communities[i]==Communities[j])
Modularity =Modularity +adjacencyMatrix[i,j] -(degree(file)[i]*degree(file)[j])/(2*m)
}
}
Modularity = Modularity/(2*m)
V(file)$color <- nodes$modularity_class+1
# To view the graph and the communities generated by gephi please umcomment the next line
#plot(file, layout = layout_with_fr, edge.label = NA, vertex.label.cex =1, vertex.size = 20, vertex.color=V(file)$color)
return(round(Modularity,4))
}
# Calc the communities in file
Communities <- 1:vcount(file)
#modularityCalc(file,Communities)
adjMod=vector()
baseMod=modularityCalc(file,Communities)
size=0
vec=Communities
for(i in 1:length(vec)){
for( j in i+1:length(vec)){
if( j<=length(vec)) {
PartitionAUX = replace(vec,i,j)
currentMod=  modularityCalc(file,PartitionAUX)
if(currentMod>baseMod){
BigPartion = PartitionAUX
BigModularity = currentMod
}
}
}
print(BigModularity)
adjMod[length(adjMod)+1] = BigModularity
baseMod = BigModularity
print(BigPartion)
vec = BigPartion
}
plot(adjMod)
set.seed() # input a random number of your choice
library(data.table) #install.packages("data.table") if not yet installed
train <- fread("train.csv",sep=",",header=TRUE) # load the data set - it might take some time
ids <- sample(1:nrow(bulk),0.1*nrow(bulk)) # select a sample (10%) of the entire data to allow a faster exploration of the data
ds <- bulk[ids,] # the working subset
set.seed() # input a random number of your choice
set.seed() # input a random number of your choice
